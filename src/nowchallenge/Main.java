package nowchallenge;

import java.util.*;
import java.io.*;

public class Main {
	public static void main(String args[]) {
		Scanner scan = new Scanner(System.in);
		App app = new App();
		app.loadData();
		int choice;

		do {
			printMainMenu();
			choice = getChoice(scan);

			switch (choice) {
			case 0:
				System.out.println("\nüëã MinRide xin c·∫£m ∆°n.");
				break;
			case 1:
				processDriverCommand(scan, app);
				break;
			case 2:
				processCustomerCommand(scan, app);
				break;
			case 3:
				processRideCommand(scan, app);
				break;
			case 4:
				processFindDriverCommand(scan, app);
				break;
			case 5:
				processBookManual(scan, app);
				break;
			case 6:
				processBookAuto(scan, app);
				break;
			case 7:
				app.undo();
				break;
			default:
				System.out.println("\n‚ùé L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i!");
				break;
			}
		} while (choice != 0);

	}
	
	static void processBookAuto(Scanner scan, App app) {
		System.out.println("\nNh·∫≠p id kh√°ch h√†ng: ");
        String custId = scan.nextLine();

        System.out.println("Nh·∫≠p ƒëi·ªÉm ƒë·∫øn (x): ");
        Double x = Double.parseDouble(scan.nextLine());

        System.out.println("Nh·∫≠p ƒëi·ªÉm ƒë·∫øn (y): ");
        Double y = Double.parseDouble(scan.nextLine());
        
        app.autoMatch(scan, custId, new Location(x, y));
	}
	
	static void processBookManual(Scanner scan, App app) {
		System.out.println("\nNh·∫≠p id kh√°ch h√†ng: ");
        String custId = scan.nextLine();

        System.out.println("Nh·∫≠p id t√†i x·∫ø: ");
        String drvId = scan.nextLine();

        System.out.println("Nh·∫≠p qu√£ng ƒë∆∞·ªùng ƒëi: ");
        Double dist = Double.parseDouble(scan.nextLine());
        
        app.orderGrab(scan, custId, drvId, dist);
	}

	static void processDriverCommand(Scanner scan, App app) {
		int choice;
		do {
			printDriverMenu();
			choice = getChoice(scan);;

			switch (choice) {
			case 0:
				break;
				
			case 1:
				System.out.println("\nNh·∫≠p k (s·ªë l∆∞·ª£ng hi·ªÉn th·ªã): ");
				int k = Integer.parseInt(scan.nextLine());
				app.showTopKDriver(k);
				break;

			case 2:
				System.out.println("\nNh·∫≠p th√¥ng tin cho t√†i x·∫ø\n");

				System.out.println("Id: ");
				String idForAdd = scan.nextLine();
				System.out.println("H·ªç t√™n: ");
				String nameForAdd = scan.nextLine();
				System.out.println("ƒêi·ªÉm ƒë√°nh gi√°: ");
				Double ratingForAdd = Double.parseDouble(scan.nextLine());
				System.out.println("V·ªã tr√≠ (x): ");
				Double xForAdd = Double.parseDouble(scan.nextLine());
				System.out.println("V·ªã tr√≠ (y): ");
				Double yForAdd = Double.parseDouble(scan.nextLine());

				app.addDriver(new Driver(idForAdd, nameForAdd, ratingForAdd, new Location(xForAdd, yForAdd)));

				break;

			case 3:
				System.out.print("\nNh·∫≠p t√™n t√†i x·∫ø mu·ªën c·∫≠p nh·∫≠t th√¥ng tin: ");
				String nameForUpdate = scan.nextLine();
				app.updateInfoForDriver(scan, nameForUpdate);

				break;

			case 4:
				System.out.print("\nNh·∫≠p id t√†i x·∫ø mu·ªën x√≥a: ");
				String idForRemove = scan.nextLine();
				app.removeDriverById(idForRemove);
				break;

			case 5:
				System.out.print("\nNh·∫≠p t√™n ho·∫∑c id c·ªßa t√†i x·∫ø mu·ªën t√¨m: ");
				String inputForFind = scan.nextLine();
				Driver driverFound = app.findDriverById(inputForFind);
				if (driverFound == null) {
					ArrayList<Driver> drvListFound = app.findDriverByName(inputForFind);
					if (drvListFound.isEmpty()) {
						System.out.print("\nKh√¥ng t√¨m th·∫•y t√†i x·∫ø c√≥ t√™n ho·∫∑c id " + inputForFind);
						return;
					}
					System.out.println("\nDanh s√°ch nh·ªØng t√†i x·∫ø c√≥ t√™n " + inputForFind + ": ");
					int index = 1;
					for(Driver drv: drvListFound) {
						System.out.print(index++ + ". ");
						drv.printInfo();
					}
				} else {
					System.out.print("\nƒê√£ t√¨m th·∫•y t√†i x·∫ø c√≥ id " + inputForFind);
					driverFound.printInfo();
				}
				break;

			case 6:
				app.sortDrivers();
				System.out.println("\n‚úÖ Danh s√°ch t√†i x·∫ø ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp");
				break;

			case 7:
				app.printAllDrivers();
				break;

			default:
				System.out.println("n‚ùé L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i!");
				break;
			}
		} while (choice != 0);
	}

	static void processCustomerCommand(Scanner scan, App app) {
		int choice;
		do {
			printCustomerMenu();
			choice = getChoice(scan);;

			switch (choice) {
			case 0:
				break;

			case 1:
				System.out.print("\nNh·∫≠p k (s·ªë l∆∞·ª£ng hi·ªÉn th·ªã): ");
                int k = Integer.parseInt(scan.nextLine());
                System.out.print("Hi·ªÉn th·ªã ƒë·∫ßu danh s√°ch (1) hay cu·ªëi danh s√°ch (0): ");
                boolean isTop = Integer.parseInt(scan.nextLine()) == 1 ? true : false;
                app.showTopKCustomer(k, isTop);
                break;

			case 2:
				System.out.println("\nNh·∫≠p th√¥ng tin kh√°ch h√†ng m·ªõi:");
                System.out.print("ID: ");
                String id = scan.nextLine();
                System.out.print("T√™n: ");
                String name = scan.nextLine();
                System.out.print("Qu·∫≠n: ");
                String district = scan.nextLine();
                System.out.print("T·ªça ƒë·ªô X: ");
                double x = Double.parseDouble(scan.nextLine());
                System.out.print("T·ªça ƒë·ªô Y: ");
                double y = Double.parseDouble(scan.nextLine());
                app.addCustomer(new Customer(id, name, new Location(x, y, district)));
				break;

			case 3:
				System.out.print("\nNh·∫≠p ID kh√°ch h√†ng c·∫ßn c·∫≠p nh·∫≠t: ");
                String idForUpdate = scan.nextLine();
                app.updateInfoForCustomer(scan, idForUpdate);
                break;

			case 4:
				System.out.print("\nNh·∫≠p ID kh√°ch h√†ng mu·ªën x√≥a: ");
                String idForRemove = scan.nextLine();
                app.removeCustomerById(idForRemove);
				break;

			case 5:
				System.out.print("\nNh·∫≠p t√™n ho·∫∑c ID kh√°ch h√†ng c·∫ßn t√¨m: ");
                String input = scan.nextLine();
                Customer found = app.findCustomerById(input);
                if (found != null) {
                    System.out.println("\n‚úÖ ƒê√£ t√¨m th·∫•y kh√°ch h√†ng:");
                    found.printInfo();
                } else {
                    ArrayList<Customer> foundList = app.findCustomerByName(input);
                    if (foundList.isEmpty()) {
                        System.out.println("‚ùé Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng n√†o c√≥ t√™n ho·∫∑c ID " + input);
                    } else {
                        System.out.println("\nDanh s√°ch kh√°ch h√†ng c√≥ t√™n " + input + ":");
                        int i = 1;
                        for (Customer c : foundList) {
                            System.out.print(i++ + ". ");
                            c.printInfo();
                        }
                    }
                }
				break;

			case 6:
				System.out.print("\nNh·∫≠p t√™n qu·∫≠n c·∫ßn li·ªát k√™ kh√°ch h√†ng: ");
                String dis = scan.nextLine();
                app.showCustomerInDistrict(scan, dis);
				break;

			case 7:
				app.printAllCustomers();
				break;
				
			default:
				System.out.println("n‚ùé L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i!");
			}
		} while (choice != 0);
	}

	static void processRideCommand(Scanner scan, App app) {
		int choice;
		do {
			printRideMenu();
			choice = getChoice(scan);;

			switch (choice) {
			case 0:
				break;

			case 1:
				System.out.print("\nNh·∫≠p ID t√†i x·∫ø: ");
                String driverId = scan.nextLine();
                app.showRidesByDriverId(driverId);
				break;
				
			case 2: 
				app.showAllRides();
				break;

			case 3:
				app.showConfirmedRides();
				break;

			case 4:
				app.showPendingRides();
				break;

			case 5:
				app.showCanceledRides();
				break;
				
			case 6:
				System.out.print("\nNh·∫≠p ID chuy·∫øn ƒëi: ");
                String rideId = scan.nextLine();
				app.cancelRide(rideId);
				break;
				
			case 7:
				app.confirmAllRides();
				break;

			default:
				System.out.println("n‚ùé L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i!");
			}
		} while (choice != 0);
	}
	
	static void processFindDriverCommand(Scanner scan, App app) {
	    System.out.print("\nNh·∫≠p ID kh√°ch h√†ng: ");
	    String customerId = scan.nextLine();
	    Customer customer = app.findCustomerById(customerId);
	    if (customer == null) return;

	    System.out.print("Nh·∫≠p b√°n k√≠nh R (ƒë∆°n v·ªã km): ");
	    double radius = Double.parseDouble(scan.nextLine());

	    ArrayList<Driver> nearbyDrivers = app.findAvailableDriver(customerId, radius);

	    if (!nearbyDrivers.isEmpty()) {
	        System.out.println("\n‚úÖ C√°c t√†i x·∫ø ·ªü g·∫ßn b·∫°n: ");
	        int i = 1;
	        for(Driver d: nearbyDrivers) {
	        	System.out.print(i + ". ");
	        	d.printInfo();
	        }
	        return;
	    }
	}

	static void printMainMenu() {
		System.out.println("\n----- MinRide Xin Ch√†o ------");
		System.out.println("1. Qu·∫£n l√Ω t√†i x·∫ø");
		System.out.println("2. Qu·∫£n l√Ω kh√°ch h√†ng");
		System.out.println("3. Qu·∫£n l√Ω chuy·∫øn ƒëi");
		System.out.println("4. T√¨m t√†i x·∫ø ph√π h·ª£p cho kh√°ch h√†ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh");
		System.out.println("5. ƒê·∫∑t xe th·ªß c√¥ng");
		System.out.println("6. ƒê·∫∑t xe t·ª± ƒë·ªông");
		System.out.println("7. Ho√†n t√°c thao t√°c X√ìA v·ª´a th·ª±c hi·ªán");
		System.out.println("0. Tho√°t\n");

	}

	static void printDriverMenu() {
		System.out.println("\n----- Qu·∫£n l√Ω t√†i x·∫ø ------");
		System.out.println("1. Hi·ªÉn th·ªã top k danh s√°ch");
		System.out.println("2. Th√™m m·ªõi t√†i x·∫ø");
		System.out.println("3. C·∫≠p nh·∫≠t th√¥ng tin t√†i x·∫ø");
		System.out.println("4. X√≥a t√†i x·∫ø");
		System.out.println("5. T√¨m ki·∫øm t√†i x·∫ø");
		System.out.println("6. S·∫Øp x·∫øp danh s√°ch theo ƒëi·ªÉm ƒë√°nh gi√°");
		System.out.println("7. Hi·ªÉn th·ªã to√†n b·ªô danh s√°ch t√†i x·∫ø");
		System.out.println("0. Quay l·∫°i\n");
	}

	static void printCustomerMenu() {
		System.out.println("\n----- Qu·∫£n l√Ω kh√°ch h√†ng ------");
		System.out.println("1. Hi·ªÉn th·ªã top k danh s√°ch theo 2 chi·ªÅu");
		System.out.println("2. Th√™m m·ªõi kh√°ch h√†ng");
		System.out.println("3. C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng");
		System.out.println("4. X√≥a kh√°ch h√†ng");
		System.out.println("5. T√¨m ki·∫øm kh√°ch h√†ng");
		System.out.println("6. Li·ªát k√™ kh√°ch h√†ng trong qu·∫≠n c·ª• th·ªÉ");
		System.out.println("7. Hi·ªÉn th·ªã to√†n b·ªô danh s√°ch kh√°ch h√†ng");
		System.out.println("0. Quay l·∫°i\n");
	}

	static void printRideMenu() {
		System.out.println("\n----- Qu·∫£n l√Ω chuy·∫øn ƒëi ------");
		System.out.println("1. Hi·ªÉn th·ªã to√†n b·ªô danh s√°ch c√°c chuy·∫øn ƒëi c·ªßa t√†i x·∫ø");
		System.out.println("2. Hi·ªÉn th·ªã to√†n b·ªô danh s√°ch c√°c chuy·∫øn ƒëi");
		System.out.println("3. Ch·ªâ hi·ªÉn th·ªã c√°c chuy·∫øn ƒëi ƒë∆∞·ª£c x√°c nh·∫≠n");
		System.out.println("4. Ch·ªâ hi·ªÉn th·ªã c√°c chuy·∫øn ƒëi ƒëang ch·ªù x√°c nh·∫≠n");
		System.out.println("5. Ch·ªâ hi·ªÉn th·ªã c√°c chuy·∫øn ƒëi ƒë√£ h·ªßy");
		System.out.println("6. H·ªßy chuy·∫øn ƒëi b·∫±ng Id");
		System.out.println("7. X√°c nh·∫≠n t·∫•t c·∫£ chuy·∫øn ƒëi");
		System.out.println("0. Quay l·∫°i\n");
	}
	
	static int getChoice(Scanner scan) {
		int choice;
		while(true) {
			try {
				System.out.print("\nüëâ Nh·∫≠p l·ª±a ch·ªçn: ");
				String choiceStr = scan.nextLine();
				choice = Integer.parseInt(choiceStr);
				if (choice >= 0 && choice <= 11) {
					return choice;
				} else {
					throw new NumberFormatException();
				}
			} catch(NumberFormatException e) {
				System.out.println("Nh·∫≠p l·∫°i s·ªë h·ª£p l·ªá t·ª´ 0 -> 7");
			}
		}
	}
}
